write.csv(WHO, "WHO.csv")
summary(WHO)
WHO[-1]
WHO[-1,]
summary(WHO)
WHO$Under15
plot(WHO$V11, WHO$V8)
bar(?)
?bar()
18/74
1-18/74
data = na.omit(data)
library(dplyr)
library(lubridate)
#sort by
data_by_date = group_by(data, date)
#for each date get the total steps, mean steps and median steps.
sum_data = summarise(data_by_date, date_total = sum(steps),
date_mean = mean(steps),
date_median = median(steps),
n = n())
library(dplyr)
library(lubridate)
#sort by
data_by_date = group_by(data, date)
#for each date get the total steps, mean steps and median steps.
sum_data = summarise(data_by_date, date_total = sum(steps),
date_mean = mean(steps),
date_median = median(steps),
n = n())
data_by_date = group_by(data, date)
update.packages()
y
install.package("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("lubridate")
na_data = read.csv(unzip("activity.zip"))
head(data)
data = na.omit(data)
library(dplyr)
library(lubridate)
#sort by
data_by_date = group_by(data, date)
#for each date get the total steps, mean steps and median steps.
sum_data = summarise(data_by_date, date_total = sum(steps),
date_mean = mean(steps),
date_median = median(steps),
n = n())
update.packages()
library("ggplot2")
library(ggplot2)
library(Rwebdriver)
library(XML)
start_session(root="http://localhost:444/wd/hub", browser = "firefox")
start_session(root="http://localhost:4444/wd/hub", browser = "firefox")
start_session(root="http://localhost:4444/wd/hub")
start_session()
start_session(root="http://localhost:4444/wd/hub/")
url = 'https://www.bestodds.com.au/odds/horse-racing/'
browser.get(url)
post.url(url)
parsed_doc = htmlParse('https://www.bestodds.com.au/odds/horse-racing/')
element_find("class = thirdLevel")
quit_session
quit_session()
meat = read.csv('meat.csv')
getwd()
meat = read.csv('/Users/Jake/Projects/ggplotvsseaborn/meat.csv')
meat
meat = meat[,2:]
type(meat$date)
desc(meat$date)
summ(meat$date)
summaeise(meat$date)
str(meat)
meat$date = as.date(meat$date)
meat$date = as.Date(meat$date)
str(meat)
by_year = group_by(meat, date)
library(dplyr)
by_year = group_by(meat, date)
by_year
meat = mutate(meat, year = year(date))
library(lubridate)
meat = mutate(meat, year = year(date))
head(meat)
by_year = group_by(meat, year)
by_year
meat_year = summarise(by_year,
summarise_each(funs_sum))
meat_year = summarise(by_year,
summarise_each(funs(sum))
)
meat_year = summarise(by_year,
summarise_each(funmeat_year = summarise(by_year,
summarise_each(funs(sum)))s(sum))
meat_year = summarise(by_year,
summarise_each(funs(sum)))
meat_year = summarise(by_year,
summarise_each(funs(mean)))
meat_year = summarise_each(funs(mean))
update.packages(dplyr)
update.packages('dplyr')
meat_by_year = meat %>%
group_by(year) %>%
summarise_each(funs(mean))
meat_by_year
meat_by_year = meat %>%
group_by(year) %>%
summarise_each(funs(sum))
meat_by_year
meat_by_year = select(meat_by_year,
year, beef, veal, pork, lamb_and_mutton, broilers, other_chicken, turkey)
meat_by_year
ggplot(data = meat_by_year, aes(x = year, y = weight) +
geom_bar(stat = 'identity')
)
library(ggplot)
library(ggplot2)
ggplot(data = meat_by_year, aes(x = year, y = weight) +
geom_bar(stat = 'identity')
)
ggplot(data = meat_by_year, aes(x = year, y = beef) +
geom_bar(stat = 'identity'))
ggplot(data = meat_by_year, aes(x = year, y = beef) +
geom_bar())
typeof(meat_by_year$year)
ggplot(meat_by_year, aes(x = year, y = beef)) +
geom_bar()
ggplot(meat_by_year, aes(x = year, y = beef)) +
geom_bar(stat = 'identity')
ggplot(meat_by_year, aes(x = year, y = beef)) +
geom_bar(stat = 'identity') +
scale_y_continuous()
ggplot(meat_by_year, aes(x = year, y = beef)) +
geom_bar(stat = 'identity') +
scale_y_continuous() +
ggtitle('Head of Cattle Slaughtered by Year')
melt_data = melt(meat_by_year, id = year)
library(reshape)
library('reshape')
install.packages('reshape')
library(reshape)
melt_data = melt(meat_by_year, id = year)
melt_data = melt(meat_by_year, id.var = year)
library(reshape2)
melt_data = melt(meat_by_year, id = year)
melt_data = melt(meat_by_year, id = 'year')
melt_data = melt(meat_by_year, id = year)
melt_data = melt(meat_by_year, id = c('year'))
melt_data = melt(meat_by_year, id = c(year))
melt_data = melt(meat_by_year, id.vars = c('year'))
meat_by_year
melt_data = melt(meat_by_year, id.vars = 'year')
melt_data = melt(meat_by_year)
library(reshape2)
meat_by_year
melt_data = melt(as.data.frame(meat_by_year), id.vars = 'year')
melt_data
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x = year, y = value)) + geom_line() +
facet_wrap(~ variable)
library(wesanderson)
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes.palette(5, "GrandBudapest"))
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes.palette(5, "GrandBudapest")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette(5, "GrandBudapest")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette(4, "GrandBudapest")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette(3, "GrandBudapest")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Moonrise3")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal1")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal2")) +
ggtitle('By Year, by type of Meat')
meat_by_year = select(meat_by_year,
year, beef, veal, pork, turkey)
melt_data = melt(as.data.frame(meat_by_year), id.vars = 'year')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal2")) +
ggtitle('By Year, by type of Meat')
install.packages('wesanderson')
install.packages("wesanderson")
library(wesanderson)
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal2")) +
ggtitle('By Year, by type of Meat')
library(ggplot2)
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal2")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Darjeeling2")) +
ggtitle('By Year, by type of Meat')
names(wes_palette)
meat_melt = melt(as.data.frame(meat), id.vars = 'date')
library(reshape2)
meat_melt = melt(as.data.frame(meat), id.vars = 'date')
meat_melt
head(meat)
meat_one = select(meat,
date, beef, veal, pork, lamb_and_mutton, broilers, other_chicken, turkey)
library(dplyr)
meat_one = select(meat,
date, beef, veal, pork, lamb_and_mutton, broilers, other_chicken, turkey)
meat_melt = melt(as.data.frame(meat_one), id.vars = 'date')
meat_melt
names(meat_melt)
ggplot(meat_melt, aes(x = date, y = value, colour = variable)) +
geom_line() +
ggtitle('Trends over time')
ggplot(meat_melt, aex(x = date, y = value, colour = variable)) +
geom_smooth()
ggplot(meat_melt, aes(x = date, y = value, colour = variable)) +
geom_smooth()
ggplot(meat_melt, aex(x = date, y = value)) + geom_smooth() +
facet_wrap(~variable)
ggplot(meat_melt, aes(x = date, y = value)) + geom_smooth() +
facet_wrap(~variable)
install.packages('stockPortfolio')
install.packages('quadprog')
stocks = c("SPY","EFA","IWM","VWO","LQD","HYG")
returns = getReturns(names(stocks), freq="week")
library(stockPortfolio)
library(quadprog)
returns = getReturns(names(stocks), freq="week")
install.packages('PortfolioAnalytics')
data(edhec)
library(PortfolioAnalytics)
data(edhec)
returns <- edhec[, 1:6]
head(returns)
init.portfolio = portfolio.spec(assets = funds)
init.portfolio = portfolio.spec(assets = fund_names)
fund_names = colnames(returns)
init.portfolio = portfolio.spec(assets = fund_names)
print.default(init.portfolio)
initial_portfolio <- add.constraint(portfolio = initial_portfolio, type = "full_investment")
initial_portfolio = portfolio.spec(assets = fund_names)
print.default(initial_portfolio)
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "full_investment")
initial_portfolio <- add.constraint(portfolio = initial_portfolio, type = "long_only")
mininimum_sd = add.objective(portfolio=initial_portfolio,
type="risk",
name="StdDev")
max_mean = add.objective(portfolio=init.portfolio,
type="return",
name="mean")
print(miniumum_sd)
minimum_sd = add.objective(portfolio=initial_portfolio,
type="risk",
name="StdDev")
print(minimum_sd)
print(max_mean)
minimum_sd_opt <- optimize.portfolio(R = returns, portfolio = minimum_sd,
optimize_method = "ROI", trace = TRUE)
minimum_sd_opt <- optimize.portfolio(R = returns, portfolio = minimum_sd,
optimize_method = "ROI")
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "weight_sum", min_sum = 1, max_sum = 1)
minimum_sd = add.objective(portfolio=initial_portfolio,
type="risk",
name="StdDev")
max_mean = add.objective(portfolio=init.portfolio,
type="return",
name="mean")
minimum_sd_opt <- optimize.portfolio(R = returns, portfolio = minimum_sd,
optimize_method = "ROI", trace = TRUE)
library(ROI)
install.packages('ROI')
library(ROI)
minimum_sd_opt <- optimize.portfolio(R = returns, portfolio = minimum_sd,
optimize_method = "ROI", trace = TRUE)
require(ROI.plugin.glpk)
require(ROI.plugin.quadprog)
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean,
optimize_method = "ROI", trace = TRUE)
max_mean = add.objective(portfolio=init.portfolio,
type="return",
name="mean")
max_mean = add.objective(portfolio=initial_portfolio,
type="return",
name="mean")
data(edhec)
returns = edhec[, 1:6]
fund_names = colnames(returns)
head(returns)
initial_portfolio = portfolio.spec(assets = fund_names)
#Initial portfolio without constraints is equal weighted.
print.default(initial_portfolio)
#Investment constraints. Full investment, long only. Other constrains which can be imposed: leverage, position limit, diversification etc.
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "weight_sum", min_sum = 1, max_sum = 1)
#Portoflio objectives:
#Portfolio risk objective:
minimum_sd = add.objective(portfolio=initial_portfolio,
type="risk",
name="StdDev")
#Portfolio reutrn objective
max_mean = add.objective(portfolio=initial_portfolio,
type="return",
name="mean")
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean,
optimize_method = "ROI", trace = TRUE)
print(minimum_sd)
print(max_mean)
install.packages('DEoptim')
require(ROI.plugin.glpk)
require(ROI.plugin.quadprog)
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean,
optimize_method = "ROI", trace = TRUE)
funds = colnames(returns)
funds <- colnames(returns)
init.portfolio <- portfolio.spec(assets = funds)
init.portfolio <- add.constraint(portfolio = init.portfolio, type = "full_investment")
init.portfolio <- add.constraint(portfolio = init.portfolio, type = "long_only")
minSD.portfolio <- add.objective(portfolio=init.portfolio,
type="risk",
name="StdDev")
# Add objectives for portfolio to maximize mean per unit ES
meanES.portfolio <- add.objective(portfolio=init.portfolio,
type="return",
name="mean")
meanES.portfolio <- add.objective(portfolio=meanES.portfolio,
type="risk",
name="ES")
print(minSD.portfolio)
minSD.opt <- optimize.portfolio(R = returns, portfolio = minSD.portfolio,
optimize_method = "ROI", trace = TRUE)
print(minSD.opt)
install.packages('PortfolioAnalytics')
install.packages("PortfolioAnalytics")
library('PortfolioAnalytics')
library(ROI)
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean,
optimize_method = "ROI", trace = TRUE)
library(PortfolioAnalytics)
data(edhec)
#A step to load the return data of our portfolio. stockPortfolio provides a number of helper functions.
returns = edhec[, 1:6]
fund_names = colnames(returns)
head(returns)
initial_portfolio = portfolio.spec(assets = fund_names)
#Initial portfolio without constraints is equal weighted.
print.default(initial_portfolio)
#Investment constraints. Full investment, long only. Other constrains which can be imposed: leverage, position limit, diversification etc.
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "weight_sum", min_sum = 1, max_sum = 1)
#Portoflio objectives:
#Portfolio risk objective:
minimum_sd = add.objective(portfolio=initial_portfolio,
type="risk",
name="StdDev")
#Portfolio return objective
max_mean = add.objective(portfolio=initial_portfolio,
type="return",
name="mean")
print(minimum_sd)
print(max_mean)
#Now that the constraints have been provided, we optimise the portfolios. Note ROI here stands for R Optimisation infrastructure,
#not return on investment.
library(ROI)
#maiximise mean return:
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean,
optimize_method = "ROI", trace = TRUE)
library(PortfolioAnalytics)
#A simple program to perform optimisation.
#Load a portfolio of funds.
data(edhec)
#A step to load the return data of our portfolio. stockPortfolio provides a number of helper functions.
returns = edhec[, 1:6]
fund_names = colnames(returns)
head(returns)
initial_portfolio = portfolio.spec(assets = fund_names)
#Initial portfolio without constraints is equal weighted.
print.default(initial_portfolio)
#Investment constraints. Full investment, long only. Other constrains which can be imposed: leverage, position limit, diversification etc.
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "weight_sum", min_sum = 1, max_sum = 1)
#Portoflio objectives:
#Portfolio risk objective:
minimum_sd = add.objective(portfolio=initial_portfolio,
type="risk",
name="StdDev")
#Portfolio return objective
max_mean = add.objective(portfolio=initial_portfolio,
type="return",
name="mean")
print(minimum_sd)
print(max_mean)
#Now that the constraints have been provided, we optimise the portfolios. Note ROI here stands for R Optimisation infrastructure,
#not return on investment.
#maiximise mean return:
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean,
optimize_method = "ROI", trace = TRUE)
print(minimum_sd_opt)
install.packages('ROI.plugin.quadprog')
install.packages('ROI.plugin.glpk')
install.packages('iterators')
install.packages("iterators")
suppressMessages(library(PortfolioAnalytics))
suppressMessages(library(foreach))
suppressMessages(library(iterators))
suppressMessages(library(ROI))
suppressMessages(library(ROI.plugin.quadprog))
suppressMessages(library(ROI.plugin.glpk))
data(edhec)
returns <- edhec[, 1:4]
colnames(returns) <- c("CA", "CTAG", "DS", "EM")
print(head(returns, 5))
funds <- colnames(returns)
portf_maxret <- portfolio.spec(assets=funds)
portf_maxret <- add.constraint(portfolio=portf_maxret, type="full_investment")
portf_maxret <- add.objective(portfolio=portf_maxret, type="return", name="mean")
print(portf_maxret)
opt_maxret <- optimize.portfolio(R=returns, portfolio=portf_maxret,optimize_method="ROI", trace=TRUE)
funds <- colnames(returns)
portf_maxret <- portfolio.spec(assets=funds)
portf_maxret <- add.constraint(portfolio=portf_maxret, type="full_investment")
portf_maxret <- add.constraint(portfolio=portf_maxret, type="box", min=c(0.02, 0.05, 0.03, 0.02), max=c(0.55, 0.6, 0.65, 0.5))
portf_maxret <- add.objective(portfolio=portf_maxret, type="return", name="mean")
print(portf_maxret)
opt_maxret <- optimize.portfolio(R=returns, portfolio=portf_maxret,optimize_method="ROI", trace=TRUE)
print(opt_maxret)
head(returns)
returns = edhec[, 1:6]
fund_names = colnames(returns)
head(returns)
initial_portfolio = portfolio.spec(assets = fund_names)
initial_portfolio = portfolio.spec(assets = fund_names)
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "full_investment")
initial_portfolio = add.constraint(portfolio=portf_maxret, type="box", min=c(0.02, 0.05, 0.03, 0.02), max=c(0.55, 0.6, 0.65, 0.5))
minimum_sd = add.objective(portfolio=initial_portfolio, type="risk", name="StdDev")
max_mean = add.objective(portfolio=initial_portfolio, type="return", name="mean")
print(minimum_sd)
print(max_mean)
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean, optimize_method = "ROI", trace = TRUE)
initial_portfolio = portfolio.spec(assets = fund_names)
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "full_investment")
initial_portfolio = add.constraint(portfolio= initial_portfolio, type="box", min=c(0.02, 0.05, 0.03, 0.02), max=c(0.55, 0.6, 0.65, 0.5))
initial_portfolio = portfolio.spec(assets = fund_names)
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "full_investment")
initial_portfolio = add.constraint(portfolio= initial_portfolio, type="box", min=c(0.02, 0.05, 0.03, 0.02, 0.02), max=c(0.55, 0.6, 0.65, 0.5, 0.5))
initial_portfolio = add.constraint(portfolio= initial_portfolio, type="box", min=c(0.02, 0.05, 0.03, 0.02, 0.02, 0.02), max=c(0.55, 0.6, 0.65, 0.5, 0.5, 0.5))
max_mean = add.objective(portfolio=initial_portfolio, type="return", name="mean")
print(max_mean)
opt_max_mean = optimize.portfolio(R = returns, portfolio = max_mean, optimize_method ="ROI", trace = TRUE)
print(opt_max_mean)
library(stringr)
library(dplyr)
library(lubridate)
library(randomForest)
library(reshape2)
library(ggplot2)
data = read.csv("/Users/Jake/Projects/LendingClub/LoanStats3a.csv", header=TRUE, stringsAsFactors=FALSE, skip=1)
head(data)
dim(data)
names(data)
summary(data)
data = subset(data, select = -desc)
data = select(data, id:last_credit_pull_d)
bad = c("Late (31-120 days)", "Default", "Charged Off")
data$bad_loans = ifelse(data$loan_status %in% bad, 1, ifelse(data$loan_status=="", NA, 0))
data$bad_loans = factor(data$bad_loans)
update.packages()
library(dplyr)
library(lubridate)
library(ggplot2)
library(forecast)
library(zoo)
setwd("/Users/Jake/Projects/RBARetailSales/Data/")
data = read.csv("RBARetailSales.csv")
names(data) = c("Per_Capita_Current", "Per_Capita_Current_2", "Per_Capita_Current_3", "Per_Capita_Current_Chain_1", "Per_Capita_Current_Chain_2", "Per_Capita_Current_Chain_3")
industry_data = read.csv("SalesByIndustry.csv", stringsAsFactors = FALSE)
industry_data = industry_data[-c(1,2,3,4,5,6,7,8,9,10), c(1,2,3,4,5,6,7,8)]
names(industry_data) = c("Date", "Food_Retailing", "Household_Goods", "Clothing_Footwear", "Department_Stores", "Other", "Cafes_Restaurants",
"Total")
industry_data$Date = paste0("01-",industry_data$Date)
industry_data$Date = dmy(industry_data$Date)
#Change all columns to numeric
industry_data[-1] <- lapply(industry_data[-1], as.numeric)
department_store_ts = select(industry_data,Department_Stores)
department_store_ts = ts(department_store_ts, frequency = 12, start = c(1982,5))
autoplot(department_store_ts)
department_store_components <- decompose(department_store_ts)
autoplot(department_store_components)
autoplot(department_store_components$trend) +
labs(title="ABS Department Store Trend",
caption="Source: ABS, jakebowmer.com", y = "Trend Sales")
